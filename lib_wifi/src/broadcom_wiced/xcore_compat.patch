diff --git a/WICED-SDK-3.3.1/WICED/WWD/include/wwd_events.h b/WICED-SDK-3.3.1/WICED/WWD/include/wwd_events.h
index 599c2a4..ff3d7f6 100644
--- a/WICED-SDK-3.3.1/WICED/WWD/include/wwd_events.h
+++ b/WICED-SDK-3.3.1/WICED/WWD/include/wwd_events.h
@@ -350,6 +350,19 @@ typedef void* (*wwd_event_handler_t)( const wwd_event_header_t* event_header, co
  *  @{
  */
 
+/**
+ * Replacement mechanism for function pointers in xCORE implementation, to allow
+ * the stack usage to be determined statically.
+ *
+ * The enum values will be used to call the required function in a switch statement.
+ */
+typedef enum
+{
+    HANDLER_NULL_FUNC,
+    HANDLER_WWD_SCAN_RESULT_FUNC,
+    HANDLER_WWD_APSTA_EVENT,
+    HANDLER_WICED_JOIN_EVENTS
+} wwd_event_handler_func_selector_t;
 
 /**
  * Registers a handler to receive event callbacks.
@@ -373,7 +386,7 @@ typedef void* (*wwd_event_handler_t)( const wwd_event_header_t* event_header, co
  *
  * @return WWD_SUCCESS or Error code
  */
-extern wwd_result_t wwd_management_set_event_handler( /*@keep@*/ const wwd_event_num_t* event_nums, /*@null@*/ wwd_event_handler_t handler_func, /*@null@*/ /*@keep@*/ void* handler_user_data, wwd_interface_t interface );
+extern wwd_result_t wwd_management_set_event_handler( /*@keep@*/ const wwd_event_num_t* event_nums, /*@null@*/ wwd_event_handler_func_selector_t handler_func, /*@null@*/ /*@keep@*/ void* handler_user_data, wwd_interface_t interface );
 
 /** @cond */
 
diff --git a/WICED-SDK-3.3.1/WICED/WWD/include/wwd_wifi.h b/WICED-SDK-3.3.1/WICED/WWD/include/wwd_wifi.h
index f3816a6..927a9de 100644
--- a/WICED-SDK-3.3.1/WICED/WWD/include/wwd_wifi.h
+++ b/WICED-SDK-3.3.1/WICED/WWD/include/wwd_wifi.h
@@ -94,6 +94,17 @@ extern "C"
 #define WICED_WIFI_OPTIMIZE_BANDWIDTH_ROAMING_TRIGGER   ( 1 )
 #define WICED_WIFI_OPTIMIZE_DISTANCE_ROAMING_TRIGGER    ( 2 )
 
+/**
+ * Replacement mechanism for function pointers in xCORE implementation, to allow
+ * the stack usage to be determined statically.
+ *
+ * The enum values will be used to call the required function in a switch statement.
+ */
+typedef enum
+{
+    CALLBACK_NULL_FUNC,
+} wiced_scan_result_callback_func_selector_t;
+
 /******************************************************
  *                   Enumerations
  ******************************************************/
@@ -159,7 +170,7 @@ extern wwd_result_t wwd_wifi_scan( wiced_scan_type_t
                                    /*@null@*/ const wiced_mac_t*                  optional_mac,
                                    /*@null@*/ /*@unique@*/ const uint16_t*        optional_channel_list,
                                    /*@null@*/ const wiced_scan_extended_params_t* optional_extended_params,
-                                   wiced_scan_result_callback_t                   callback,
+                                   wiced_scan_result_callback_func_selector_t     callback,
                                    wiced_scan_result_t**                          result_ptr,
                                    /*@null@*/ void*                               user_data,
                                    wwd_interface_t                                interface );
diff --git a/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/SPI/wwd_bus_protocol.c b/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/SPI/wwd_bus_protocol.c
index b68a261..b12f8d8 100644
--- a/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/SPI/wwd_bus_protocol.c
+++ b/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/SPI/wwd_bus_protocol.c
@@ -342,7 +342,7 @@ return_with_error:
     {
         /* Read out the first 12 bytes to get the bus credit information */
         uint8_t temp_buffer[12 + sizeof(wwd_bus_header_t)];
-        wwd_bus_transfer_bytes( BUS_READ, WLAN_FUNCTION, 0, 12, (wwd_transfer_bytes_packet_t*) temp_buffer );
+        wwd_bus_transfer_bytes_read( WLAN_FUNCTION, 0, 12, (wwd_transfer_bytes_packet_t*) temp_buffer );
 
         /* Abort the transfer to force the packet to be dropped */
         if ( wiced_gspi_bytes_pending > 12 )
@@ -522,7 +522,7 @@ wwd_result_t wwd_bus_write_register_value( wwd_bus_function_t function, uint32_t
     internal_gspi_packet->data[0] = value;
 
     /* Send it off */
-    return wwd_bus_transfer_bytes( BUS_WRITE, function, address, value_length, internal_gspi_packet );
+    return wwd_bus_transfer_bytes_write( function, address, value_length, internal_gspi_packet );
 }
 
 /*
@@ -546,13 +546,44 @@ wwd_result_t wwd_bus_read_backplane_value( uint32_t address, uint8_t register_le
     return wwd_read_register_value( BACKPLANE_FUNCTION, address & BACKPLANE_ADDRESS_MASK, register_length, value );
 }
 
-wwd_result_t wwd_bus_transfer_bytes( wwd_bus_transfer_direction_t direction, wwd_bus_function_t function, uint32_t address, uint16_t size, /*@in@*/ /*@out@*/ wwd_transfer_bytes_packet_t* data )
+wwd_result_t wwd_bus_transfer_bytes_read( wwd_bus_function_t function, uint32_t address, uint16_t size, /*@in@*/ /*@out@*/ wwd_transfer_bytes_packet_t* data )
 {
     uint32_t* temp;
     wwd_result_t result;
     uint16_t newsize;
 
-    data->bus_header.gspi_header = (wwd_bus_gspi_header_t) ( (uint32_t) ( ( wwd_bus_gspi_command_mapping[(int)direction] & 0x1     ) << 31 ) |
+    data->bus_header.gspi_header = (wwd_bus_gspi_header_t) ( (uint32_t) ( ( wwd_bus_gspi_command_mapping[(int)BUS_READ] & 0x1     ) << 31 ) |
+                                                     (uint32_t) ( ( GSPI_INCREMENT_ADDRESS               & 0x1     ) << 30 ) |
+                                                     (uint32_t) ( ( function                             & 0x3     ) << 28 ) |
+                                                     (uint32_t) ( ( address                              & 0x1FFFF ) << 11 ) |
+                                                     (uint32_t) ( ( size                                 & 0x7FF   ) <<  0 ) );
+
+    /* Reshuffle the bits if we're not in 32 bit mode */
+    if ( wwd_bus_gspi_32bit == WICED_FALSE )
+    {
+        /* Note: This typecast should always be valid if the buffer containing the GSpi packet has been correctly declared as 32-bit aligned */
+        temp  = (uint32_t*) data;
+        *temp = H32TO16LE(*temp);
+    }
+
+    /* Round size up to 32-bit alignment */
+    newsize = (uint16_t) ROUND_UP(size, 4);
+
+    /* Send the data */
+    result = host_platform_spi_transfer( BUS_READ, (uint8_t*) data, (uint16_t) ( newsize + sizeof(wwd_bus_gspi_header_t) ) );
+
+    add_log_entry( LOG_RX, function, address, (unsigned long)((function == BACKPLANE_FUNCTION)?size-4:size), (function == BACKPLANE_FUNCTION)?((char*)&data->data)+4:(char*)&data->data );
+
+    return result;
+}
+
+wwd_result_t wwd_bus_transfer_bytes_write( wwd_bus_function_t function, uint32_t address, uint16_t size, /*@in@*/ /*@out@*/ wwd_transfer_bytes_packet_t* data )
+{
+    uint32_t* temp;
+    wwd_result_t result;
+    uint16_t newsize;
+
+    data->bus_header.gspi_header = (wwd_bus_gspi_header_t) ( (uint32_t) ( ( wwd_bus_gspi_command_mapping[(int)BUS_WRITE] & 0x1     ) << 31 ) |
                                                      (uint32_t) ( ( GSPI_INCREMENT_ADDRESS               & 0x1     ) << 30 ) |
                                                      (uint32_t) ( ( function                             & 0x3     ) << 28 ) |
                                                      (uint32_t) ( ( address                              & 0x1FFFF ) << 11 ) |
@@ -570,7 +601,7 @@ wwd_result_t wwd_bus_transfer_bytes( wwd_bus_transfer_direction_t direction, wwd
     newsize = (uint16_t) ROUND_UP(size, 4);
 
     /* Ensure we are clear to write */
-    if ( ( direction == BUS_WRITE ) && ( function == WLAN_FUNCTION ) )
+    if ( function == WLAN_FUNCTION )
     {
         uint32_t wwd_bus_gspi_status;
         uint32_t loop_count = 0;
@@ -606,12 +637,7 @@ wwd_result_t wwd_bus_transfer_bytes( wwd_bus_transfer_direction_t direction, wwd
     }
 
     /* Send the data */
-    result = host_platform_spi_transfer( direction, (uint8_t*) data, (uint16_t) ( newsize + sizeof(wwd_bus_gspi_header_t) ) );
-
-    if ( direction == BUS_READ )
-    {
-        add_log_entry( LOG_RX, function, address, (unsigned long)((function == BACKPLANE_FUNCTION)?size-4:size), (function == BACKPLANE_FUNCTION)?((char*)&data->data)+4:(char*)&data->data );
-    }
+    result = host_platform_spi_transfer( BUS_WRITE, (uint8_t*) data, (uint16_t) ( newsize + sizeof(wwd_bus_gspi_header_t) ) );
 
     return result;
 }
@@ -752,7 +778,7 @@ static wwd_result_t wwd_read_register_value( wwd_bus_function_t function, uint32
         data_ptr = pkt->data;
     }
     *data_ptr = 0;
-    result = wwd_bus_transfer_bytes( BUS_READ, function, address, (uint16_t)(value_length + padding), (wwd_transfer_bytes_packet_t*) gspi_internal_buffer );
+    result = wwd_bus_transfer_bytes_read( function, address, (uint16_t)(value_length + padding), (wwd_transfer_bytes_packet_t*) gspi_internal_buffer );
 
     memcpy( value, data_ptr, value_length );
 
diff --git a/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/wwd_bus_common.c b/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/wwd_bus_common.c
index bd62466..d8c6ada 100644
--- a/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/wwd_bus_common.c
+++ b/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/wwd_bus_common.c
@@ -101,7 +101,7 @@ static wwd_result_t download_resource( wwd_resource_t resource, uint32_t address
         /* Round up the size of the chunk */
         transfer_size = (uint16_t) ROUND_UP( transfer_size, WWD_BUS_ROUND_UP_ALIGNMENT );
 
-        if ( WWD_SUCCESS != ( result = wwd_bus_transfer_bytes( BUS_WRITE, BACKPLANE_FUNCTION, address & BACKPLANE_ADDRESS_MASK, transfer_size, (wwd_transfer_bytes_packet_t*) image ) ) )
+        if ( WWD_SUCCESS != ( result = wwd_bus_transfer_bytes_write( BACKPLANE_FUNCTION, address & BACKPLANE_ADDRESS_MASK, transfer_size, (wwd_transfer_bytes_packet_t*) image ) ) )
         {
             return result;
         }
@@ -170,7 +170,7 @@ static wwd_result_t download_resource( wwd_resource_t resource, uint32_t address
                 host_buffer_release( buffer, WWD_NETWORK_TX );
                 return result;
             }
-            result = wwd_bus_transfer_bytes( BUS_WRITE, BACKPLANE_FUNCTION, ( address & BACKPLANE_ADDRESS_MASK ), transfer_size, (wwd_transfer_bytes_packet_t*) ( packet + sizeof(wwd_buffer_queue_ptr_t)) );
+            result = wwd_bus_transfer_bytes_write( BACKPLANE_FUNCTION, ( address & BACKPLANE_ADDRESS_MASK ), transfer_size, (wwd_transfer_bytes_packet_t*) ( packet + sizeof(wwd_buffer_queue_ptr_t)) );
             if ( result != WWD_SUCCESS )
             {
                 host_buffer_release( buffer, WWD_NETWORK_TX );
diff --git a/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/wwd_bus_protocol_interface.h b/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/wwd_bus_protocol_interface.h
index ff29e32..bf2788d 100644
--- a/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/wwd_bus_protocol_interface.h
+++ b/WICED-SDK-3.3.1/WICED/WWD/internal/bus_protocols/wwd_bus_protocol_interface.h
@@ -64,7 +64,8 @@ extern wwd_result_t wwd_bus_write_register_value       ( wwd_bus_function_t func
 
 /* Device data transfer functions */
 extern wwd_result_t wwd_bus_send_buffer                ( wiced_buffer_t buffer );
-extern wwd_result_t wwd_bus_transfer_bytes             ( wwd_bus_transfer_direction_t direction, wwd_bus_function_t function, uint32_t address, uint16_t size, /*@in@*/ /*@out@*/ wwd_transfer_bytes_packet_t* data );
+extern wwd_result_t wwd_bus_transfer_bytes_read        ( wwd_bus_function_t function, uint32_t address, uint16_t size, /*@in@*/ /*@out@*/ wwd_transfer_bytes_packet_t* data );
+extern wwd_result_t wwd_bus_transfer_bytes_write       ( wwd_bus_function_t function, uint32_t address, uint16_t size, /*@in@*/ /*@out@*/ wwd_transfer_bytes_packet_t* data );
 
 /* Frame transfer function */
 extern wwd_result_t wwd_bus_read_frame( /*@out@*/  wiced_buffer_t* buffer );
diff --git a/WICED-SDK-3.3.1/WICED/WWD/internal/chips/43362A2/wwd_ap.c b/WICED-SDK-3.3.1/WICED/WWD/internal/chips/43362A2/wwd_ap.c
index 3e0b946..8a98001 100644
--- a/WICED-SDK-3.3.1/WICED/WWD/internal/chips/43362A2/wwd_ap.c
+++ b/WICED-SDK-3.3.1/WICED/WWD/internal/chips/43362A2/wwd_ap.c
@@ -83,7 +83,7 @@ typedef enum
  *               Function Declarations
  ******************************************************/
 
-static void*        wwd_handle_apsta_event ( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data );
+void*               wwd_handle_apsta_event ( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data );
 static wwd_result_t internal_ap_init       ( wiced_ssid_t* ssid, wiced_security_t auth_type, const uint8_t* security_key, uint8_t key_length, uint8_t channel );
 wwd_result_t        wwd_wifi_ap_init       ( wiced_ssid_t* ssid, wiced_security_t auth_type, const uint8_t* security_key, uint8_t key_length, uint8_t channel );
 wwd_result_t        wwd_wifi_ap_up         ( void );
@@ -100,7 +100,7 @@ static const wwd_event_num_t apsta_events[] = { WLC_E_IF, WLC_E_LINK, WLC_E_NONE
  *               Function Definitions
  ******************************************************/
 
-static void* wwd_handle_apsta_event( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data )
+void* wwd_handle_apsta_event( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data )
 {
     UNUSED_PARAMETER( event_header );
     UNUSED_PARAMETER( event_data );
@@ -185,7 +185,7 @@ static wwd_result_t internal_ap_init( wiced_ssid_t* ssid, wiced_security_t auth_
     CHECK_RETURN( host_rtos_init_semaphore( &wwd_wifi_sleep_flag ) );
 
     /* Register for interested events */
-    CHECK_RETURN_WITH_SEMAPHORE( wwd_management_set_event_handler( apsta_events, wwd_handle_apsta_event, NULL, WWD_AP_INTERFACE ), &wwd_wifi_sleep_flag );
+    CHECK_RETURN_WITH_SEMAPHORE( wwd_management_set_event_handler( apsta_events, HANDLER_WWD_APSTA_EVENT, NULL, WWD_AP_INTERFACE ), &wwd_wifi_sleep_flag );
 
     /* Set the SSID */
     data = (uint32_t*) wwd_sdpcm_get_iovar_buffer( &buffer, (uint16_t) 40, IOVAR_STR_BSSCFG_SSID );
@@ -442,7 +442,7 @@ wwd_result_t wwd_wifi_stop_ap( void )
         return result2;
     }
 
-    CHECK_RETURN( wwd_management_set_event_handler( apsta_events, NULL, NULL, WWD_AP_INTERFACE ) );
+    CHECK_RETURN( wwd_management_set_event_handler( apsta_events, HANDLER_NULL_FUNC, NULL, WWD_AP_INTERFACE ) );
 
     wwd_wifi_ap_is_up = WICED_FALSE;
     return WWD_SUCCESS;
diff --git a/WICED-SDK-3.3.1/WICED/WWD/internal/wwd_sdpcm.c b/WICED-SDK-3.3.1/WICED/WWD/internal/wwd_sdpcm.c
index 9fb523f..d1c14c3 100644
--- a/WICED-SDK-3.3.1/WICED/WWD/internal/wwd_sdpcm.c
+++ b/WICED-SDK-3.3.1/WICED/WWD/internal/wwd_sdpcm.c
@@ -36,6 +36,7 @@
 #include "internal/bus_protocols/wwd_bus_protocol_interface.h"
 #include "internal/wwd_internal.h"
 #include "wwd_management.h"
+#include "xassert.h"
 
 /******************************************************
  * @cond       Constants
@@ -234,7 +235,7 @@ typedef struct bcm_event
 typedef struct
 {
     const /*@null@*/ wwd_event_num_t* events;
-    /*@null@*/ wwd_event_handler_t    handler;
+    wwd_event_handler_func_selector_t handler;
     /*@null@*/ void*                  handler_user_data;
 } sdpcm_event_list_elem_t;
 
@@ -386,7 +387,7 @@ wwd_result_t wwd_sdpcm_init( void )
     for ( i = 0; i < (uint16_t) WWD_EVENT_HANDLER_LIST_SIZE; i++ )
     {
         wwd_sdpcm_event_list[i].events = NULL;
-        wwd_sdpcm_event_list[i].handler = NULL;
+        wwd_sdpcm_event_list[i].handler = HANDLER_NULL_FUNC;
         wwd_sdpcm_event_list[i].handler_user_data = NULL;
     }
 
@@ -558,6 +559,17 @@ void wwd_sdpcm_update_credit(uint8_t* data)
     wwd_bus_set_flow_control(header->wireless_flow_control);
 }
 
+/** Replacement mechanism for function pointers in xCORE implementation, to
+ *  allow the stack usage to be determined statically.
+ *
+ *  The handler parameter will be used to select and call the required function.
+ *  The implementation of this function is in xcore_wrappers.c.
+ */
+wwd_event_handler_t* sdpcm_event_handler_wrapper(wwd_event_handler_func_selector_t handler,
+                                                 const wwd_event_header_t* event_header,
+                                                 const uint8_t* event_data,
+                                                 void* handler_user_data);
+
 /** Processes and directs incoming SDPCM packets
  *
  *  This function receives SDPCM packets from the Broadcom 802.11 device and decodes the SDPCM header
@@ -690,7 +702,7 @@ void wwd_sdpcm_process_rx_packet( /*@only@*/ wiced_buffer_t buffer )
                 {
                     if ( wwd_sdpcm_raw_packet_processor != NULL )
                     {
-                        wwd_sdpcm_raw_packet_processor( buffer, WWD_STA_INTERFACE );
+                        fail("wwd_sdpcm_raw_packet_processor call has been disabled!");
                     }
                     else
                     {
@@ -792,8 +804,17 @@ void wwd_sdpcm_process_rx_packet( /*@only@*/ wiced_buffer_t buffer )
                             if ( wwd_sdpcm_event_list[i].events[j] == wwd_event->event_type )
                             {
                                 /* Correct event type has been found - call the handler function and exit loop */
-                                wwd_sdpcm_event_list[i].handler_user_data = wwd_sdpcm_event_list[i].handler( wwd_event, (uint8_t*) DATA_AFTER_HEADER( event ), wwd_sdpcm_event_list[i].handler_user_data );
-                                /*@innerbreak@*/
+
+                                /* Remove the use of function pointers by
+                                 * calling a wrapper function with a handler
+                                 * enum value instead
+                                 */
+                                wwd_sdpcm_event_list[i].handler_user_data =
+                                sdpcm_event_handler_wrapper(
+                                    wwd_sdpcm_event_list[i].handler,
+                                    wwd_event,
+                                    (uint8_t*)DATA_AFTER_HEADER(event),
+                                    wwd_sdpcm_event_list[i].handler_user_data);
                                 break;
                             }
                         }
@@ -956,15 +977,14 @@ wwd_result_t wwd_sdpcm_send_ioctl( sdpcm_command_type_t type, uint32_t command,
  *
  * @param  event_nums     An array of event types that is to trigger the handler. The array must be terminated with a WLC_E_NONE event
  *                        See @ref wwd_event_num_t for available events
- * @param handler_func   A function pointer to the new handler callback,
- *                        or NULL if callbacks are to be disabled for the given event type
+ * @param handler_func   An enum used to select and call the required function.
  * @param handler_user_data  A pointer value which will be passed to the event handler function
  *                            at the time an event is triggered (NULL is allowed)
  * @param interface      The interface to set the handler for.
  *
  * @return WWD result code
  */
-wwd_result_t wwd_management_set_event_handler( /*@keep@*/ const wwd_event_num_t* event_nums, /*@null@*/ wwd_event_handler_t handler_func, /*@null@*/ /*@keep@*/ void* handler_user_data, wwd_interface_t interface )
+wwd_result_t wwd_management_set_event_handler( /*@keep@*/ const wwd_event_num_t* event_nums, wwd_event_handler_func_selector_t handler_func, /*@null@*/ /*@keep@*/ void* handler_user_data, wwd_interface_t interface )
 {
     wiced_buffer_t buffer;
     uint8_t* event_mask;
@@ -989,7 +1009,7 @@ wwd_result_t wwd_management_set_event_handler( /*@keep@*/ const wwd_event_num_t*
 
             /* Delete the entry */
             wwd_sdpcm_event_list[i].events = NULL;
-            wwd_sdpcm_event_list[i].handler = NULL;
+            wwd_sdpcm_event_list[i].handler = HANDLER_NULL_FUNC;
             wwd_sdpcm_event_list[i].handler_user_data = NULL;
 
             entry = i;
@@ -1002,7 +1022,7 @@ wwd_result_t wwd_management_set_event_handler( /*@keep@*/ const wwd_event_num_t*
     }
 
     /* Check if handler function was provided */
-    if ( handler_func != NULL )
+    if ( handler_func != HANDLER_NULL_FUNC  )
     {
         /* Check if an empty entry was not found */
         if ( entry == (uint16_t) 0xFF )
@@ -1168,6 +1188,7 @@ uint8_t wWd_sdpcm_get_available_credits( void )
 wwd_result_t wwd_wifi_set_raw_packet_processor( wwd_wifi_raw_packet_processor_t function )
 {
     wwd_sdpcm_raw_packet_processor = function;
+    fail("wwd_sdpcm_raw_packet_processor() is not supported!");
     return WWD_SUCCESS;
 }
 
diff --git a/WICED-SDK-3.3.1/WICED/WWD/internal/wwd_wifi.c b/WICED-SDK-3.3.1/WICED/WWD/internal/wwd_wifi.c
index 29b3b2f..2b8137c 100644
--- a/WICED-SDK-3.3.1/WICED/WWD/internal/wwd_wifi.c
+++ b/WICED-SDK-3.3.1/WICED/WWD/internal/wwd_wifi.c
@@ -113,7 +113,7 @@ typedef struct
  *             Static Variables
  ******************************************************/
 
-static wiced_scan_result_callback_t   scan_result_callback;
+static wiced_scan_result_callback_func_selector_t scan_result_callback;
 static wiced_scan_result_t**          wwd_scan_result_ptr;
 
 static uint32_t              wiced_join_status[3];
@@ -182,8 +182,8 @@ uint8_t wwd_tos_map[8] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
 
 static inline /*@null@*/ tlv8_header_t* wlu_parse_tlvs              ( const tlv8_header_t* tlv_buf, uint32_t buflen, dot11_ie_id_t key );
 static            wiced_bool_t    wlu_is_wpa_ie                     ( vendor_specific_ie_header_t* wpaie, tlv8_header_t** tlvs, uint32_t* tlvs_len );
-static /*@null@*/ void*           wiced_join_events_handler         ( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data );
-static            void*           wwd_scan_result_handler           ( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data );
+/*@null@*/ void*                  wiced_join_events_handler         ( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data );
+void*                             wwd_scan_result_handler           ( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data );
 static            wwd_result_t    wwd_wifi_prepare_join             ( wwd_interface_t interface, wiced_security_t security, /*@unique@*/ const uint8_t* security_key, uint8_t key_length, host_semaphore_type_t* semaphore );
 static            wwd_result_t    wwd_wifi_get_packet_filters_inner ( uint32_t max_count, uint32_t offset, wiced_packet_filter_t* list, wiced_bool_t enabled_list, uint32_t* count_out );
 static            wwd_result_t    wwd_wifi_set_band_specific_rate   ( wwd_interface_t interface, uint32_t rate );
@@ -203,7 +203,7 @@ wwd_result_t wwd_wifi_scan( wiced_scan_type_t                              scan_
                             /*@null@*/ const wiced_mac_t*                  optional_mac,
                             /*@null@*/ /*@unique@*/ const uint16_t*        optional_channel_list,
                             /*@null@*/ const wiced_scan_extended_params_t* optional_extended_params,
-                            wiced_scan_result_callback_t                   callback,
+                            wiced_scan_result_callback_func_selector_t     callback,
                             wiced_scan_result_t**                          result_ptr,
                             /*@null@*/ void*                               user_data,
                             wwd_interface_t                                interface
@@ -226,7 +226,7 @@ wwd_result_t wwd_wifi_scan( wiced_scan_type_t                              scan_
         param_size = (uint16_t) ( param_size + channel_list_size * sizeof(uint16_t) );
     }
 
-    CHECK_RETURN( wwd_management_set_event_handler( scan_events, wwd_scan_result_handler, user_data, interface ) );
+    CHECK_RETURN( wwd_management_set_event_handler( scan_events, HANDLER_WWD_SCAN_RESULT_FUNC, user_data, interface ) );
 
     /* Allocate a buffer for the IOCTL message */
     scan_params = (wl_escan_params_t*) wwd_sdpcm_get_iovar_buffer( &buffer, param_size, IOVAR_STR_ESCAN );
@@ -315,6 +315,16 @@ wwd_result_t wwd_wifi_abort_scan( void )
     return result;
 }
 
+/** Replacement mechanism for function pointers in xCORE implementation, to
+ *  allow the stack usage to be determined statically.
+ *
+ *  The callback parameter will be used to select and call the required function.
+ *  The implementation of this function is in xcore_wrappers.c.
+ */
+void scan_result_callback_wrapper(wiced_scan_result_callback_func_selector_t callback,
+                                  wiced_scan_result_t** result_ptr,
+                                  void* user_data, wiced_scan_status_t status);
+
 /** Handles scan result events
  *
  *  This function receives scan record events, and parses them into a better format, then passes the results
@@ -327,7 +337,7 @@ wwd_result_t wwd_wifi_abort_scan( void )
  * @returns : handler_user_data parameter
  *
  */
-static void* wwd_scan_result_handler( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data )
+void* wwd_scan_result_handler( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data )
 {
     wiced_scan_result_t*     record;
     wl_escan_result_t*       eresult;
@@ -346,23 +356,29 @@ static void* wwd_scan_result_handler( const wwd_event_header_t* event_header, co
     uint32_t                 count_tmp = 0;
     uint16_t                 temp16;
 
-    if ( scan_result_callback == NULL )
+    if ( scan_result_callback == CALLBACK_NULL_FUNC )
     {
         return handler_user_data;
     }
 
     if ( event_header->status == WLC_E_STATUS_SUCCESS)
     {
-        scan_result_callback( NULL, handler_user_data, WICED_SCAN_COMPLETED_SUCCESSFULLY );
-        scan_result_callback = NULL;
+        scan_result_callback_wrapper(scan_result_callback,
+                                     NULL,
+                                     handler_user_data,
+                                     WICED_SCAN_COMPLETED_SUCCESSFULLY);
+        scan_result_callback = CALLBACK_NULL_FUNC;
         return handler_user_data;
     }
     if ( event_header->status == WLC_E_STATUS_NEWSCAN ||
          event_header->status == WLC_E_STATUS_NEWASSOC ||
          event_header->status == WLC_E_STATUS_ABORT )
     {
-        scan_result_callback( NULL, handler_user_data, WICED_SCAN_ABORTED );
-        scan_result_callback = NULL;
+        scan_result_callback_wrapper(scan_result_callback,
+                                     NULL,
+                                     handler_user_data,
+                                     WICED_SCAN_ABORTED);
+        scan_result_callback = CALLBACK_NULL_FUNC;
         return handler_user_data;
     }
 
@@ -373,7 +389,10 @@ static void* wwd_scan_result_handler( const wwd_event_header_t* event_header, co
 
     if ( wwd_scan_result_ptr == NULL )
     {
-        scan_result_callback( (wiced_scan_result_t**)event_data, handler_user_data, WICED_SCAN_INCOMPLETE );
+        scan_result_callback_wrapper(scan_result_callback,
+                                     (wiced_scan_result_t**)event_data,
+                                     handler_user_data,
+                                     WICED_SCAN_INCOMPLETE);
         return handler_user_data;
     }
 
@@ -603,7 +622,10 @@ static void* wwd_scan_result_handler( const wwd_event_header_t* event_header, co
         record->band = WICED_802_11_BAND_2_4GHZ;
     }
 
-    scan_result_callback( wwd_scan_result_ptr, handler_user_data, WICED_SCAN_INCOMPLETE );
+    scan_result_callback_wrapper(scan_result_callback,
+                                 wwd_scan_result_ptr,
+                                 handler_user_data,
+                                 WICED_SCAN_INCOMPLETE);
     if ( *wwd_scan_result_ptr == NULL )
     {
 #if 0
@@ -984,7 +1006,7 @@ static wwd_result_t wwd_wifi_prepare_join( wwd_interface_t interface, wiced_secu
 
     CHECK_RETURN( wwd_sdpcm_send_ioctl( SDPCM_SET, WLC_SET_WPA_AUTH, buffer, 0, interface ) );
 
-    retval = wwd_management_set_event_handler( join_events, wiced_join_events_handler, (void*) semaphore, interface );
+    retval = wwd_management_set_event_handler( join_events, HANDLER_WICED_JOIN_EVENTS, (void*) semaphore, interface );
     wiced_assert("Set Event handler failed\n", retval == WWD_SUCCESS );
 
     return retval;
@@ -995,7 +1017,7 @@ wwd_result_t wwd_wifi_leave( wwd_interface_t interface )
 {
     wiced_buffer_t buffer;
 
-    CHECK_RETURN( wwd_management_set_event_handler( join_events, NULL, NULL, interface ) );
+    CHECK_RETURN( wwd_management_set_event_handler( join_events, HANDLER_NULL_FUNC, NULL, interface ) );
 
     /* Disassociate from AP */
     CHECK_IOCTL_BUFFER( wwd_sdpcm_get_ioctl_buffer( &buffer, 0 ) )
@@ -1027,7 +1049,7 @@ wwd_result_t wwd_wifi_deauth_sta( const wiced_mac_t* mac, wwd_dot11_reason_code_
  *  indicating that the system has joined successfully.
  *  Wakes the thread which was doing the join, allowing it to resume.
  */
-static /*@null@*/ void* wiced_join_events_handler( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data )
+/*@null@*/ void* wiced_join_events_handler( const wwd_event_header_t* event_header, const uint8_t* event_data, /*@returned@*/ void* handler_user_data )
 {
     host_semaphore_type_t* semaphore = (host_semaphore_type_t*) handler_user_data;
     wiced_bool_t join_complete = WICED_FALSE;
